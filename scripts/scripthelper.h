#ifndef SCRIPTHELPER_H
#define SCRIPTHELPER_H

#include <vector>
#include "sol.hpp"
#include "r3d.hpp"
#include "aitimer.h"
#include "neutraltimer.h"

class DamageInfo;
class CharacterIntermediate;
struct ScriptHelper
{
    static std::vector<AiTimer *> *mLevelTimers;
    static std::vector<NeutralTimer *> *mNeutralTimers;
    static std::string mMapName;

    static bool LoadLuaFile(std::string name, sol::state_view state);
    static void RegisterGlobals(sol::global_table state);

    static void InitState(sol::state_view state);

    static bool IsDampener(sol::stack_object object);
    static bool IsObjectAI(sol::stack_object obj);
    static bool IsObjectHero(sol::stack_object obj);
    static bool IsTurretAI(sol::stack_object obj);
    static float DistPoint3DSegment3D(sol::stack_object pos, sol::stack_object point1, sol::stack_object point2);
    static float GetTime();
    static int GetDampenerType(sol::stack_object obj);
    static int GetHQType(sol::stack_object obj);
    static int GetHashedGameObjName(std::string string);
    static int GetID(sol::stack_object owner);
    static int GetLane(sol::stack_object laneBuilding);
    static int GetObjectLaneId(sol::stack_object obj);
    static int GetTeamID(sol::stack_object owner);
    static int GetTotalTeamMinionsSpawned();
    static int GetTurretPosition(sol::stack_object obj);
    static sol::object Add3dPoints(sol::stack_object point1, sol::stack_object point2);
    static sol::object GetBarracks(int team, int lane, sol::this_state thisState);
    static sol::object GetDampener(int team, int lane, sol::this_state thisState);
    static sol::object GetHQ(int team, sol::this_state thisState);
    static sol::object GetLinkedBarrack(sol::stack_object dampener, sol::this_state thisState);
    static sol::object GetNormalizedPositionDelta(sol::stack_object endObj, sol::stack_object startObj, bool shouldIgnoreY, sol::this_state thisState);
    static sol::object GetPosition(sol::stack_object owner, sol::this_state thisState);
    static sol::object GetTurret(int team, int lane, int position, sol::this_state thisState);
    static sol::object GetTutorialPlayer();
    static r3dPoint3D Make3DPoint(float x, float y, float z, sol::this_state thisState);
    static sol::object Multiply3dPointByScalar(sol::stack_object point, float scalar, sol::this_state thisState);
    static std::string GetUnitSkinName(sol::stack_object unit);
    static void AssignTeamGold(int teamID, float gold);
    static void CreateChildTurret(std::string name, std::string skinName, int team, int turretIndex, int lane);
    static void CreateGameObject(std::string name, std::string fileName, sol::stack_object position);
    static void EndGame(int winningTeam);
    static void FacePosition(sol::stack_object target, sol::stack_object targetPos);
    static void GiveExpToNearHeroesFromNeutral(sol::stack_object killer, float exp, sol::stack_object position, float radius);
    static void IncExp(sol::stack_object champion, float exp);
    static void IncGold(sol::stack_object object, float goldAmount);
    static void IncPosition(sol::stack_object owner, sol::stack_object delta);
    static void InitTimer(std::string timerName, float delay, bool repeat);
    static void LoadScriptIntoScript(std::string name, sol::this_state state);
    static void LockCamera(bool lock);
    static void Log(std::string message);
    static void MakeSay(sol::stack_object talker, std::string message);
    static void PauseGame();
    static void PlayTutorialAudioEvent(std::string eventID, std::string luaCallbackName);
    static void PreloadCharacter(std::string name);
    static void PreloadParticle(std::string name);
    static void PreloadSpell(std::string name);
    static void ResumeGame();
    static void SetBarracksEnabled(sol::stack_object barrack, bool state);
    static void SetCircularCameraRestriction(sol::stack_object center, float radius);
    static void SetDampenerState(sol::object dampener, int state);
    static void SetDisableMinionSpawn(sol::stack_object barrack, float respawnTime);
    static void SetInputLockingFlag(int flag, bool flagValue);
    static void SetLaneAffinity(std::string name, int turretIndex, int lane);
    static void SetPosition(sol::stack_object target, sol::stack_object targetPos);
    static void SpawnNeutralMinion(sol::object neutralCamp, int groupNumber, int groupIndex, int nameIndex);
    static void ToggleFogOfWar();
    static void ToggleFogOfWarOn();
    static void ToggleInputLockingFlag(int flag);
    static void _ALERT(std::string message);
    static void luaNeutralInitTimer(sol::object functionName, float delay, bool repeat);

    //Damage
    static DamageInfo* sDamageInfo;
    static int GetDamageType();
    static int GetSourceType();
    static float GetDamageAmount();
    static float GetPercentageOfAttack();
    static sol::object GetAttacker();
    static int GetHitResult();

    //BuildingBlocks
    static void BBSetCameraPosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIsPathable(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBTeleportToKeyLocation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBTeleportToPosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetNearestPassablePosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBForEachUnitInTargetAreaAddBuff(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBForEachUnitInTargetArea(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    static void BBForEachUnitInTargetAreaRandom(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    static void BBForNClosestUnitsInTargetArea(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    static void BBForEachChampion(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    static void BBForEachUnitInTargetRectangle(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    static void BBGetRandomPointInAreaUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetRandomPointInAreaPosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetUnitPosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetSkinID(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetPointByUnitFacingOffset(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetMissilePosFromID(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBModifyPosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncFlatPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncFlatPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncPercentPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncPercentPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncPermanentFlatPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncPermanentFlatPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncPermanentPercentPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncPermanentPercentPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetFlatPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetFlatPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetPercentPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetPercentPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyDamage(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyStun(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyPacified(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyNet(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyDisarm(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplySuppression(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplySilence(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyRoot(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyTaunt(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyCharm(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyFear(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplySleep(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyNearSight(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyNoRender(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyForceRenderParticles(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyStealth(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyRevealSpecificUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplySuppressCallForHelp(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyCallForHelpSuppresser(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyIgnoreCallForHelp(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncPAR(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncGold(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static float BBLuaGetGold(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncHealth(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBDrawDefaultHitEffects(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetCastSpellTargetPos(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBAdjustCastInfoCenterAOE(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSpawnPet(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSpawnMinion(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBCloneUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBCloneUnitPet(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncExp(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBForEachPetInTarget(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    static void BBSetDodgePiercing(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetStateDisableAmbientGold(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetStunned(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetPacified(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetNetted(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetDisarmed(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetRooted(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetSuppressCallForHelp(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetCallForHelpSuppresser(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBRedirectGold(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetTargetingType(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetSpell(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetBuffCasterUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetTriggerUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBInvalidateUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBForceDead(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetIgnoreCallForHelp(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSpellBuffAdd(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBTimeChannelTickExecute(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    static void BBBreak(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    static void BBSpellBuffRemoveType(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSpellBuffRemove(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSpellBuffRemoveCurrent(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSpellBuffClear(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetBuffRemainingDuration(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSpellEffectCreate(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSpellEffectRemove(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBStopChanneling(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBStopMove(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBMove(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBMoveAway(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBDestroyMissile(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBDestroyMissileForTarget(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSpellCast(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBCancelAutoAttack(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBOverrideAutoAttack(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBRemoveOverrideAutoAttack(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetAutoAttackTargetingFlags(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetPetReturnRadius(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBCreateItem(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSealSpellSlot(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetBuffToolTipVar(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetSpellToolTipVar(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBLinkVisibility(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIsInBrush(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetHeightDifference(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBRemoveLinkVisibility(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetNearSight(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetNearSight(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetPetOwner(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBStartTrackingCollisions(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBStopMoveBlock(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBStopCurrentOverrideAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBPreloadCharacter(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBPreloadParticle(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBPreloadSpell(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBDispellPositiveBuffs(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBDispellNegativeBuffs(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBRemovePerceptionBubble(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBAddUnitPerceptionBubble(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBAddPosPerceptionBubble(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBPlayAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBUnlockAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetNumberOfHeroesOnTeam(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBCanSeeTarget(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBPushCharacterData(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetSlotSpellCooldownTimeVer2(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBPopCharacterData(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBPopAllCharacterData(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBPushCharacterFade(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBPopCharacterFade(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBForEachPointAroundCircle(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    static void BBSetCharacterDebugRadius(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBForEachPointOnLine(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    static void BBFaceDirection(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetGameTime(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetChampionBySkinName(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBPauseAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBEnableWallOfGrassTracking(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBShowHealthBar(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBClearOverrideAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBOverrideAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncSpellLevel(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetPARCostInc(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetPARCostInc(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetPARMultiplicativeCostInc(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetPARMultiplicativeCostInc(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSetInCastTable(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBOverrideCastRange(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetCastRange(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBAddDebugCircle(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBRemoveDebugCircle(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBModifyDebugCircleRadius(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBModifyDebugCircleColor(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBApplyAssistMarker(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBSkipNextAutoAttack(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBIncMaxHealth(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static void BBGetIsZombie(sol::stack_object passThrough, sol::stack_object perBlockParams);
    static float GetCFParam(sol::stack_object passThrough, sol::stack_object perBlockParams, std::string parramName);

    //Spells
    static CharacterIntermediate *sCharInter;
    static void Say(sol::stack_object owner, std::string message);
    static void ApplyStun(sol::stack_object owner, sol::stack_object target, float duration);
    static void ApplyPacified(sol::stack_object owner, sol::stack_object target, float duration);
    static void ApplyNet(sol::stack_object owner, sol::stack_object target, float duration);
    static void ApplyDisarm(sol::stack_object owner, sol::stack_object target, float duration);
    static void ApplyRoot(sol::stack_object owner, sol::stack_object target, float duration);
    static void ApplySilence(sol::stack_object owner, sol::stack_object target, float duration);
    static void ApplySuppression(sol::stack_object owner, sol::stack_object target, float duration);
    static void ApplySuppressCallForHelp(sol::stack_object owner, sol::stack_object target, float duration);
    static void ApplyIgnoreCallForHelp(sol::stack_object owner, sol::stack_object target, float duration);
    static void ApplyCallForHelpSuppresser(sol::stack_object owner, sol::stack_object target, float duration);
    static void CancelOrder(sol::stack_object owner);
    static void ChannelingStart(sol::stack_object caster, sol::stack_object target, float duration, float timeBeetwenUpdate);
    static void ChannelingStop(sol::stack_object caster, int whyStoppedCondition, int whyStoppedSource);
    static void DrawDefaultHitEffects(sol::stack_object target);
    static bool GetIsAttackOverride();
    static int GetCastSpellLevelPlusOne();
    static sol::object GetCastSpellTargetPos();
    static int GetCastSpellTargetsHitPlusOne();
    static sol::object GetCastSpellLuaInfo();
    static int GetCasterID();
    static float GetHealth(sol::stack_object target, int formal);
    static float GetHealthPercent(sol::stack_object target ,int formal);
    static bool GetInvulnerable(sol::stack_object target);
    static bool GetPhysicalImmune(sol::stack_object target);
    static bool GetTargetable(sol::stack_object target);
    static bool GetTargetableToTeam(sol::stack_object target, int team);
    static bool GetMagicImmune(sol::stack_object target);
    static float GetPAR(sol::stack_object target, int parType);
    static float GetPARCost();
    static float GetPARPercent(sol::stack_object target, int parType);
    static int GetPARType(sol::stack_object target);
    static bool HasPARType(sol::stack_object target, int parType);
    static float GetMaxHealth(sol::stack_object target, int formal);
    static float GetMaxPAR(sol::stack_object target,int parType);
    static std::string GetName(sol::stack_object obj);
    static float GetArmor(sol::stack_object target);
    static float GetSpellBlock(sol::stack_object target);
    static float GetDodge(sol::stack_object target);
    static float GetMissChance(sol::stack_object target);
    static float GetAttackSpeedMod(sol::stack_object target);
    static float GetMovementSpeed(sol::stack_object target);
    static float GetLevel(sol::stack_object  target);
    static float GetTotalAttackDamage(sol::stack_object target);
    static float GetSlotSpellCooldownTime(sol::stack_object target, int slot, int spellbookType, int slotType);
    static int GetSlotSpellLevel(sol::stack_object target, int slot, int spellbookType, int slotType);
    static std::string GetSlotSpellName(sol::stack_object target, int slot, int spellbookType, int slotType);
    static std::string GetSpellName();
    static int GetSpellSlot();

    static bool GetNoRender(sol::stack_object target);
    static bool GetBrushVisibilityFake(sol::stack_object target);
    static bool GetForceRenderParticles(sol::stack_object target);
    static bool GetStealthed(sol::stack_object target);
    static bool GetRevealSpecificUnit(sol::stack_object target);
    static bool GetTaunted(sol::stack_object target);
    static bool GetCharmed(sol::stack_object target);
    static bool GetSuppressed(sol::stack_object target);
    static bool GetFeared(sol::stack_object target);
    static bool GetDisableAmbientGold(sol::stack_object target);
    static void SetDisableAmbientGold(sol::stack_object target, bool value);
    static bool GetSleep(sol::stack_object target);
    static bool GetNearSight(sol::stack_object target);
    static bool GetGhosted(sol::stack_object target);
    static bool GetGhostProof(sol::stack_object target);

    static void IncHealth(sol::stack_object target, float value);
    static void IncMana(sol::stack_object target, float value);
    static void IncMoveSpeedFloorMod(float value, sol::stack_object target);
    static void IncFlatDodgeMod(float value, sol::stack_object target);
    static void IncFlatMissChanceMod(float value, sol::stack_object target);
    static void IncPercentArmorPenetrationMod(float value, sol::stack_object target);
    static void IncPercentMagicPenetrationMod(float value, sol::stack_object target);
    static void IncPercentMultiplicativeAttackSpeedMod(float value, sol::stack_object target);
    static void IncPercentMultiplicativeMovementSpeedMod(float value, sol::stack_object target);

    static void IssueOrder(sol::stack_object owner,int order, sol::stack_object pos, sol::stack_object caster);
    static void RaiseSpellFlag(int flag);
    static void ReincarnateNonDeadHero(sol::stack_object target);

    static void SetCanCastWhileDisabled(bool value);
    static void SetInvulnerable(sol::stack_object target, bool value);
    static void SetTargetable(sol::stack_object target, bool value);
    static void SetNotTargetableToTeam(sol::stack_object target, bool value, int team);
    static void SetPhysicalImmune(sol::stack_object target, bool value);
    static void SetMagicImmune(sol::stack_object target, bool value);
    static void SetRooted(sol::stack_object target, bool value);
    static void SetScaleSkinCoef(float coef, sol::stack_object target);
    static void SetSilenced(sol::stack_object target, bool value);
    static void SetSlotSpellCooldownTime(sol::stack_object target, int slot,int spellbookType ,int slotType, float time);
    static void SetStealthed(sol::stack_object target, bool value);
    static void SetRevealSpecificUnit(sol::stack_object target, bool value);
    static void SetStunned(sol::stack_object target, bool value);
    static void SetPacified(sol::stack_object target, bool value);
    static void SetNetted(sol::stack_object target, bool value);
    static void SetDisarmed(sol::stack_object target, bool value);
    static void SetTaunted(sol::stack_object target, bool value);
    static void SetCharmed(sol::stack_object target, bool value);
    static void SetFeared(sol::stack_object target, bool value);
    static void SetSleep(sol::stack_object target, bool value);
    static void SetNearSight(sol::stack_object target, bool value);
    static void SetNoRender(sol::stack_object target, bool value);
    static void SetForceRenderParticles(sol::stack_object target, bool value);
    static void SetGhosted(sol::stack_object target, bool value);
    static void SetSuppressed(sol::stack_object target, bool value);
    static void SetGhostProof(sol::stack_object target, bool value);
    static void SetSuppressCallForHelp(sol::stack_object target, bool value);
    static void SetCallForHelpSuppresser(sol::stack_object target, bool value);
    static void SetBrushVisibilityFake(sol::stack_object target, bool value);
    static void SetIgnoreCallForHelp(sol::stack_object target, bool value);

    static void SpellBuffAdd(sol::stack_object caster, sol::stack_object target, std::string name, int type, int maxStack, float duration, sol::stack_object luaBuffVars);
    static void SpellBuffAddNoRenew(sol::stack_object caster, sol::stack_object target, std::string name, int type, int maxStack, float duration, sol::stack_object luaBuffVars);
    static int SpellBuffCount(sol::stack_object target, std::string name, sol::stack_object caster);
    static void SpellBuffRemove(sol::stack_object target, std::string name, sol::stack_object caster);
    static void SpellBuffRemoveCurrent(sol::stack_object target);
    static void SpellBuffRemoveType(sol::stack_object target, int type);
    static bool HasBuffOfType(sol::stack_object target, int type);
    static unsigned long SpellEffectCreate(std::string effectName,sol::stack_object pos, sol::stack_object bindObject ,sol::stack_object flags);
    static void TeleportToKeyLocation(sol::stack_object owner, int locationEnum, int team);
    static void TeleportToPosition(sol::stack_object owner, sol::stack_object position);
    static int GetAIState(sol::stack_object target);

    static bool GetCanAttack(sol::stack_object target);
    static bool GetCanCast(sol::stack_object target);
    static bool IsAutoCastOn(sol::stack_object target);
    static bool GetCanMove(sol::stack_object target);
    static void SetCanAttack(sol::stack_object target, bool state);
    static void SetCanCast(sol::stack_object target, bool state);
    static void SetCanMove(sol::stack_object target, bool state);

    static bool IsBaseAI(sol::stack_object obj);
    static bool IsHeroAI(sol::stack_object obj);
    static bool IsMelee(sol::stack_object obj);
    static bool IsRanged(sol::stack_object obj);
    static bool IsMoving(sol::stack_object obj);

    static void IncFlatGoldPer10Mod(float delta, sol::stack_object target);
    static void IncPermanentFlatGoldPer10Mod(float delta, sol::stack_object target);
    static void IncBaseAttackDamage(float delta, sol::stack_object target);
    static void IncPermanentBaseAttackDamage(float delta, sol::stack_object target);
    static void IncFlatArmorMod(float delta, sol::stack_object target);
    static void IncPermanentFlatArmorMod(float delta, sol::stack_object target);
    static void IncFlatArmorPenetrationMod(float delta, sol::stack_object target);
    static void IncPermanentFlatArmorPenetrationMod(float delta, sol::stack_object target);
    static void IncFlatMagicPenetrationMod(float delta, sol::stack_object target);
    static void IncPermanentFlatMagicPenetrationMod(float delta, sol::stack_object target);
    static void IncFlatSpellBlockMod(float delta, sol::stack_object target);
    static void IncPermanentFlatSpellBlockMod(float delta, sol::stack_object target);
    static void IncFlatAttackRangeMod(float delta, sol::stack_object target);
    static void IncPermanentFlatAttackRangeMod(float delta, sol::stack_object target);
    static void IncFlatCastRangeMod(float delta, sol::stack_object target);
    static void IncPermanentFlatCastRangeMod(float delta, sol::stack_object target);
    static void IncFlatCooldownMod(float delta, sol::stack_object target);
    static void IncPermanentFlatCooldownMod(float delta, sol::stack_object target);
    static void IncFlatCritChanceMod(float delta, sol::stack_object target);
    static void IncPermanentFlatCritChanceMod(float delta, sol::stack_object target);
    static void IncFlatCritDamageMod(float delta, sol::stack_object target);
    static void IncPermanentFlatCritDamageMod(float delta, sol::stack_object target);
    static void IncFlatHPPoolMod(float delta, sol::stack_object target);
    static void IncPermanentFlatHPPoolMod(float delta, sol::stack_object target);
    static void IncFlatHPRegenMod(float delta, sol::stack_object target);
    static void IncPermanentFlatHPRegenMod(float delta, sol::stack_object target);
    static void IncFlatMagicDamageMod(float delta, sol::stack_object target);
    static void IncPermanentFlatMagicDamageMod(float delta, sol::stack_object target);
    static void IncFlatMagicReduction(float delta, sol::stack_object target);
    static void IncPermanentFlatMagicReduction(float delta, sol::stack_object target);
    static void IncFlatMovementSpeedMod(float delta, sol::stack_object target);
    static void IncPermanentFlatMovementSpeedMod(float delta, sol::stack_object target);
    static void IncFlatPhysicalDamageMod(float delta, sol::stack_object target);
    static void IncPermanentFlatPhysicalDamageMod(float delta, sol::stack_object target);
    static void IncFlatPhysicalReduction(float delta, sol::stack_object target);
    static void IncPermanentFlatPhysicalReduction(float delta, sol::stack_object target);
    static void IncFlatBubbleRadiusMod(float delta, sol::stack_object target);
    static void IncPermanentFlatBubbleRadiusMod(float delta, sol::stack_object target);
    static void IncPercentHardnessMod(float delta, sol::stack_object target);
    static void IncPermanentPercentHardnessMod(float delta, sol::stack_object target);
    static void IncPercentArmorMod(float delta, sol::stack_object target);
    static void IncPermanentPercentArmorMod(float delta, sol::stack_object target);
    static void IncPercentSpellBlockMod(float delta, sol::stack_object target);
    static void IncPermanentPercentSpellBlockMod(float delta, sol::stack_object target);
    static void IncPercentAttackRangeMod(float delta, sol::stack_object target);
    static void IncPermanentPercentAttackRangeMod(float delta, sol::stack_object target);
    static void IncPercentAttackSpeedMod(float delta, sol::stack_object target);
    static void IncPermanentPercentAttackSpeedMod(float delta, sol::stack_object target);
    static void IncPercentCastRangeMod(float delta, sol::stack_object target);
    static void IncPermanentPercentCastRangeMod(float delta, sol::stack_object target);
    static void IncPercentCooldownMod(float delta, sol::stack_object target);
    static void IncPermanentPercentCooldownMod(float delta, sol::stack_object target);
    static void IncPercentCritDamageMod(float delta, sol::stack_object target);
    static void IncPermanentPercentCritDamageMod(float delta, sol::stack_object target);
    static void IncPercentEXPBonus(float delta, sol::stack_object target);
    static void IncPermanentPercentEXPBonus(float delta, sol::stack_object target);
    static void IncPercentHPPoolMod(float delta, sol::stack_object target);
    static void IncPermanentPercentHPPoolMod(float delta, sol::stack_object target);
    static void IncPercentHPRegenMod(float delta, sol::stack_object target);
    static void IncPermanentPercentHPRegenMod(float delta, sol::stack_object target);
    static void IncPercentHealingAmountMod(float delta, sol::stack_object target);
    static void IncPermanentPercentHealingAmountMod(float delta, sol::stack_object target);
    static void IncPercentLifeStealMod(float delta, sol::stack_object target);
    static void IncPermanentPercentLifeStealMod(float delta, sol::stack_object target);
    static void IncPercentSpellVampMod(float delta, sol::stack_object target);
    static void IncPermanentPercentSpellVampMod(float delta, sol::stack_object target);
    static void IncPercentMagicDamageMod(float delta, sol::stack_object target);
    static void IncPermanentPercentMagicDamageMod(float delta, sol::stack_object target);
    static void IncPercentMagicReduction(float delta, sol::stack_object target);
    static void IncPermanentPercentMagicReduction(float delta, sol::stack_object target);
    static void IncPercentMovementSpeedMod(float delta, sol::stack_object target);
    static void IncPermanentPercentMovementSpeedMod(float delta, sol::stack_object target);
    static void IncPercentPhysicalDamageMod(float delta, sol::stack_object target);
    static void IncPermanentPercentPhysicalDamageMod(float delta, sol::stack_object target);
    static void IncPercentPhysicalReduction(float delta, sol::stack_object target);
    static void IncPermanentPercentPhysicalReduction(float delta, sol::stack_object target);
    static void IncPercentRespawnTimeMod(float delta, sol::stack_object target);
    static void IncPermanentPercentRespawnTimeMod(float delta, sol::stack_object target);
    static void IncPercentGoldLostOnDeathMod(float delta, sol::stack_object target);
    static void IncPermanentPercentGoldLostOnDeathMod(float delta, sol::stack_object target);
    static void IncPercentBubbleRadiusMod(float delta, sol::stack_object target);
    static void IncPermanentPercentBubbleRadiusMod(float delta, sol::stack_object target);
    static void IncAcquisitionRangeMod(float delta, sol::stack_object target);
    static void IncPermanentAcquisitionRangeMod(float delta, sol::stack_object target);
    static float GetFlatGoldPer10Mod(sol::stack_object target);
    static float GetBaseAttackDamage(sol::stack_object target);
    static float GetFlatArmorMod(sol::stack_object target);
    static float GetFlatArmorPenetrationMod(sol::stack_object target);
    static float GetFlatMagicPenetrationMod(sol::stack_object target);
    static float GetFlatSpellBlockMod(sol::stack_object target);
    static float GetFlatAttackRangeMod(sol::stack_object target);
    static float GetFlatCastRangeMod(sol::stack_object target);
    static float GetFlatCooldownMod(sol::stack_object target);
    static float GetFlatCritChanceMod(sol::stack_object target);
    static float GetFlatCritDamageMod(sol::stack_object target);
    static float GetFlatHPPoolMod(sol::stack_object target);
    static float GetFlatHPRegenMod(sol::stack_object target);
    static float GetFlatMagicDamageMod(sol::stack_object target);
    static float GetFlatMagicReduction(sol::stack_object target);
    static float GetFlatMovementSpeedMod(sol::stack_object target);
    static float GetFlatPhysicalDamageMod(sol::stack_object target);
    static float GetFlatPhysicalReduction(sol::stack_object target);
    static float GetFlatBubbleRadiusMod(sol::stack_object target);
    static float GetPercentHardnessMod(sol::stack_object target);
    static float GetPercentArmorMod(sol::stack_object target);
    static float GetPercentSpellBlockMod(sol::stack_object target);
    static float GetPercentAttackRangeMod(sol::stack_object target);
    static float GetPercentAttackSpeedMod(sol::stack_object target);
    static float GetPercentCastRangeMod(sol::stack_object target);
    static float GetPercentCooldownMod(sol::stack_object target);
    static float GetPercentCritDamageMod(sol::stack_object target);
    static float GetPercentEXPBonus(sol::stack_object target);
    static float GetPercentHPPoolMod(sol::stack_object target);
    static float GetPercentHPRegenMod(sol::stack_object target);
    static float GetPercentHealingAmountMod(sol::stack_object target);
    static float GetPercentLifeStealMod(sol::stack_object target);
    static float GetPercentSpellVampMod(sol::stack_object target);
    static float GetPercentMagicDamageMod(sol::stack_object target);
    static float GetPercentMagicReduction(sol::stack_object target);
    static float GetPercentMovementSpeedMod(sol::stack_object target);
    static float GetPercentPhysicalDamageMod(sol::stack_object target);
    static float GetPercentPhysicalReduction(sol::stack_object target);
    static float GetPercentRespawnTimeMod(sol::stack_object target);
    static float GetPercentGoldLostOnDeathMod(sol::stack_object target);
    static float GetPercentBubbleRadiusMod(sol::stack_object target);
    static float GetAcquisitionRangeMod(sol::stack_object target);

    //Extra
    static void DefUpdateAura(sol::stack_object centerObj, float range, int scanType, std::string buffName);
    static bool BBIsTargetBehindMe(sol::stack_object target, sol::stack_object owner);
    static bool BBIsTargetInFrontOfMe(sol::stack_object target, sol::stack_object owner);
    static bool IsDead(sol::stack_object target);
    static float DistanceBetweenObjects(sol::stack_object obj1, sol::stack_object obj2);
    static float DistanceBetweenObjectAndPoint(sol::stack_object obj1, sol::stack_object point);
    static float DistanceBetweenPoints(sol::stack_object point1, sol::stack_object point2);
    static void SetSpellCastRange(float newRange);

};

#endif // SCRIPTHELPER_H
